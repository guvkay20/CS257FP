We are currently assuming that each pointer points to a 64-bit/8-byte integer, which means that operations like +p and -p use the size s as 8 bytes. We are also assuming that valid memory addresses range from 0 to 512=8*64. That is to say, we can fit up to 64 64-bit integers into memory (with one byte left over).

========
For Benchmark 3-1a:

Three distinct non-null int pointers that point to nonoverlapping ints cannot fit in a memory space ranging from 0 to 23.

We declare three variables p0, p1, p2, of sort Pointer.

We assert:
Address(pX) is not NULL.
Address(p1) - Address(p0) >= 8.
Address(p2) - Address(p1) >= 8.
Address(p2) + 7 <= 23.

We expect this to be unsat.

Note: Because we decided to have the default maximum address be 512, this is actually satisfiable. We had to add one more constaint that p0's address is at least 2 to mimic the desired effect.

========

For Benchmark 3-1b:

The same setup minus the assertion Address(p2) + 7 <= 23. Should be sat.

========

For Benchmark 3-2a:

We declare 64 variables, named p0 through p63, of sort Pointer.
We declare none of them are NULL pointers.
We declare that, for each 0 <= i <= 62: Address(p(i+1)) - Address(pi) >= 8.
We declare a pointer end
We declare that Address(p64) + 7 == Address(end).

We claim this is unsat.

=========

For Benchmark 3-2b:

We only have 64 pointers (get rid of p0 and anything involving it). This should be sat. Moreover, p1 should have address 0 or 1.

=========
