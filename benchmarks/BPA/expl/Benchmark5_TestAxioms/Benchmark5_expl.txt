Now we wish to directly test whether the pointer axioms were correctly instantiated.

==============

Benchmark 5-1:

Axiom A_in states that for all pointers, their address value lies between 0 and A. This axiom is instantiated for all subexpressions of sort Pointer.

We declare a pointer, then attempt to claim it's address is out-of-range. This should be unsat.

Declare pointer pt.
Declare int addr

We Assert:
addr = base(block(pt)) + offset(pt)

addr < 0 OR addr > 512

==============

Benchmark 5-2:

Axiom A_<= states that pointer comparison between two pointers p and q is defined (and gives the expected result) exactly when both:
-p and q are not NULL, AND
-block(p) == block(q)

We therefore wish to test that:
(a) if the conditions are met, then we can't get a false result
(b) if any of the conditions are _not_ met, then we _can_ get a false result.

Declare pointers p and q.
For convenience, declare ints ap and aq.

We assert:
ap = base(block(p)) + offset(p)
aq = base(block(q)) + offset(q)

To test (a), we further assert:
ap != 0
aq != 0
block(p) == block(q)
ap <= aq
NOT (p <=p q)

This should be unsat.

To test (b), we try combinations of all of the above with one of the premises (i.e. everything except the last assertion) negated. All of these should be sat.







