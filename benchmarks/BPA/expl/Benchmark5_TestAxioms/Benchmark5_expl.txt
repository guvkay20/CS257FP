Now we wish to directly test whether the pointer axioms were correctly instantiated.

Axioms:
A_<=	Completed 5-2
A_p:	Completed 5-3
A_%:	Completed 5-4 (but could use expansion)
A_in:	Completed 5-1 (but could use expansion)
A_-:
A_o:
A_Delta:
A_+:
A_a:	Completed 5-3
A_b:	Completed 5-3

==============

Benchmark 5-1:

Axiom A_in states that for all pointers, their address value lies between 0 and A. This axiom is instantiated for all subexpressions of sort Pointer.

We declare a pointer, then attempt to claim its address is out-of-range. This should be unsat.

Declare pointer pt.
Declare int addr

We Assert:
addr = base(block(pt)) + offset(pt)

addr < 0 OR addr > 512

==============

Benchmark 5-2:

Axiom A_<= states that pointer comparison between two pointers p and q is defined (and gives the expected result) exactly when both:
-p and q are not NULL, AND
-block(p) == block(q)

We therefore wish to test that:
1. if the conditions are met, then we can't get a false result
2. if any of the conditions are _not_ met, then we _can_ get a false result.

Declare pointers p and q.
For convenience, declare ints ap and aq.

We assert:
ap = base(block(p)) + offset(p)
aq = base(block(q)) + offset(q)

(a):
To test 1., we further assert:
ap != 0
aq != 0
block(p) == block(q)
ap <= aq
NOT (p <=p q)

This should be unsat.

To test 2., we try combinations of all of the above with one of the premises (i.e. everything except the last assertion) negated.

(b): ap == 0 (should be sat)
(c): aq == 0 (should be unsat; notice that aq == 0 with ap <= aq forces ap <= 0)
(d): block(p) != block(q) (should be sat)
(e): ap !<= aq (should be sat)

(f): There is one more combination to test: If we negate ap <= aq, AND negate NOT(p <=p q), then we should still get unsat.

==============

Benchmark 5-3:

A_p states that a pointer created with the same block and address as p must equal p. A_a states that the address of a created pointer is the address it was created with, provided that the address was valid. A_b states that the block of a created poitner is the block it was created with, provided that the address was valid.

We therefore wish to test these three axioms directly for an instantiated p.

Declare pointer p.
For convenience, declare Int a
For convenience, declare Int b
For convenience, assert b = Block(p).

Here are a few statements:
(1) a == (Base b) + offset(p).
(2) 0 <= a <= 512.

(3) (Create b a) == p.
(4) block(Create b a) == b.
(5) address(Create b a) == a

We can combine these in different combinations. We expect the following statements to be true:
(a): 1 implies 2.
(b): 1 implies 3.
(c): (2 and 3) -> 1 ((Create b a), provided a is a valid address, must have block b and address a, and so it is functionally equal to any other pointer with this block and address.)

(d): 2 implies (4 and 5). (This doesn't use anything about p. This is just a direct statement of A_a and A_b together.)
(e): We can have ~2 and 4.
(f): We cannot have ~2 and 5.
(g): We _can_ have ~1 and 5.

==============

Benchmark 5-4:

Axiom A_% states that the alignment of any pointer must be a value between 0 and s-1. Testing this is similar to testing that addresses must lie in memory from 5-1.

We declare a pointer, then attempt to claim it's alignment is out-of-range. This should be unsat.

Declare pointer pt.

We Assert:
align(pt) < 0 OR align(pt) > 7

==============

Benchmark 5-5:

Axiom A_Delta states that valid pointer addition (pointer + int) preserves the associated memory. Axiom A_+ states that, in the same situation, the offset is adjusted by the amount s * number added.

As a baseline, we start with:
(declare-const pt Pointer)
(declare-const c Int)
# For convenience:
(declare-const a Int)
(assert (= a (+ (Base (Block pt)) (Offset pt))))
(declare-const a_sum Int)
(assert (= a_sum (+ (Base (Block (+p pt c))) (Offset (+p pt c)))))

First, we test that the parser properly recognizes pt +p c as a pointer-type expression for A_p and A_%:

(a): Assert a_sum < 0 OR a_sum > 512 (should be unsat)

(b): Assert align(pt +p c) < 0 OR align(pt +p c) > 7 (should be unsat)

Now we add the following:

(declare-const sum Pointer)
# Assert sum =p pt +p c.
(assert (=p sum (+p pt c)))

First, we explicitly choose values to force A_Delta and A_+ to apply, then check that we got the expected results.

(c):
First Assert a = 200, c = 20 (so offset adjustment is 20*8=160, making address(sum) == 360).
Then Assert Block(pt) != Block(sum).
(Should be unsat.)

(d): 
First Assert a = 200, c = 20 (so offset adjustment is 20*8=160, making address(sum) == 360).
Then Assert Offset(sum) - Offset(pt) != 160.
(Should be unsat.)

(e): While we're at it, we can add an extra check that pointer subtraction works properly.
First Assert a = 200, c = 20 (so offset adjustment is 20*8=160, making address(sum) == 360).
Then Assert sum -p pt != 20.
(Should be unsat.)

Now, we explicitly choose values to force A_Delta and A_+ not to apply, then check that it is possible to get bad results.








